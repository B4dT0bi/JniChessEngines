<project name="senpai-Windows-64" basedir="." default="postcompile">
    <!-- include the environment -->
    <property environment="env" />
    <!-- output directory for temporary object files -->
    <property name="buildDir" value="target/windows64" />
    <!-- output directory for the shared library -->
    <property name="libsDir" value="../libs/windows64" />
    <!-- the name of the shared library -->
    <property name="libName" value="senpai64.exe" />
    <!-- the jni header jniPlatform to use -->
    <property name="jniPlatform" value="win32" />
    <!-- the compilerPrefix for the C & C++ compilers -->
    <property name="compilerPrefix" value="x86_64-w64-mingw32-" />
    <!--  the compilerSuffix for the C & C++ compilers -->
    <property name="compilerSuffix" value="" />

    <!-- define gcc compiler, options and files to compile -->
    <property name="gcc" value="${compilerPrefix}gcc${compilerSuffix}" />
    <property name="gcc-opts"
        value="-c -Wall -O2 -mfpmath=sse -msse2 -fmessage-length=0 -m64 -std=c99" />
    <fileset dir="./" id="gcc-files">
        <exclude name="target/" />


    </fileset>

    <!-- define g++ compiler, options and files to compile -->
    <property name="g++" value="${compilerPrefix}g++${compilerSuffix}" />
    <property name="g++-opts"
        value="-c -Wall -O2 -mfpmath=sse -msse2 -fmessage-length=0 -m64 -std=c++11" />
    <fileset dir="./" id="g++-files">
        <exclude name="target/" />
        <include name="src/senpai_10.cpp" />

    </fileset>

    <!-- define linker and options -->
    <property name="linker" value="${compilerPrefix}g++${compilerSuffix}" />
    <property name="linker-opts"
        value="-Wl,--kill-at -static -static-libgcc -static-libstdc++ -m64" />
    <property name="libraries" value="" />

    <!-- cleans the build directory, removes all object files and shared libs -->
    <target name="clean">
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${buildDir}" />
            <fileset dir="${libsDir}" excludes="**/.svn" includes="**/*" />
        </delete>
    </target>

    <target name="precompile">
        <condition property="compiler-found">
            <and>
                <or>
                    <!-- Include both b/c Windows might be either -->
                    <available file="${g++}" filepath="${env.PATH}" />
                    <available file="${g++}" filepath="${env.Path}" />
                </or>
                <or>
                    <!-- Include both b/c Windows might be either -->
                    <available file="${gcc}" filepath="${env.PATH}" />
                    <available file="${gcc}" filepath="${env.Path}" />
                </or>
            </and>
        </condition>
        <condition property="has-compiler">
            <equals arg1="${compiler-found}" arg2="true" />
        </condition>

    </target>

    <target name="create-build-dir" depends="precompile" if="has-compiler">
        <!-- FIXME this is pretty nasty :/ -->
        <copy todir="${buildDir}">
            <fileset refid="g++-files" />
            <fileset refid="gcc-files" />
        </copy>
        <delete>
            <fileset dir="${buildDir}">
                <include name="*" />
                <exclude name="*.o" />
            </fileset>
        </delete>
    </target>

    <!-- compiles all C and C++ files to object files in the build directory -->
    <target name="compile" depends="create-build-dir" if="has-compiler">
        <mkdir dir="${buildDir}" />
        <apply dest="${buildDir}" executable="${g++}" failonerror="true" verbose="true">
            <arg line="${g++-opts}" />
            <arg value="-I." />

            <srcfile />
            <arg value="-o" />
            <targetfile />
            <fileset refid="g++-files" />
            <compositemapper>
                <mapper from="*.cpp" to="*.o" type="glob" />
                <mapper from="*.mm" to="*.o" type="glob" />
            </compositemapper>
        </apply>
        <apply dest="${buildDir}" executable="${gcc}" failonerror="true" verbose="true">
            <arg line="${gcc-opts}" />
            <arg value="-I." />

            <srcfile />
            <arg value="-o" />
            <targetfile />
            <fileset refid="gcc-files" />
            <compositemapper>
                <mapper from="*.c" to="*.o" type="glob" />
                <mapper from="*.m" to="*.o" type="glob" />
            </compositemapper>
        </apply>
    </target>

    <!-- links the shared library based on the previously compiled object files -->
    <target name="link" depends="compile" if="has-compiler">
        <fileset dir="${buildDir}" id="objFileSet">
            <patternset>
                <include name="**/*.o" />
            </patternset>
        </fileset>
        <pathconvert pathsep=" " property="objFiles" refid="objFileSet" />
        <mkdir dir="${libsDir}" />
        <exec dir="${buildDir}" executable="${linker}" failonerror="true">
            <arg line="${linker-opts}" />
            <arg value="-o" />
            <arg path="${libsDir}/${libName}" />
            <arg line="${objFiles}" />
            <arg line="${libraries}" />
        </exec>
    </target>

    <target name="postcompile" depends="link">

    </target>
</project>
