#ifndef BitBoards_H
#define BitBoards_H

#include <x86intrin.h>

#include "Types.h"

// ���������
void InitBitBoards();

// ���������
const BitBoard SB = 1; // ������� (SingleBit)
const BitBoard LightMask = 0x55AA55AA55AA55AA; // ����� ����

const BitBoard FileMask[8] =
{
	0x0101010101010101,
	0x0202020202020202,
	0x0404040404040404,
	0x0808080808080808,
	0x1010101010101010,
	0x2020202020202020,
	0x4040404040404040,
	0x8080808080808080
};

const BitBoard FileA = FileMask[0];
const BitBoard FileD = FileMask[3];
const BitBoard FileE = FileMask[4];
const BitBoard FileH = FileMask[7];

const BitBoard RankMask[8] =
{
	0x00000000000000FF,
	0x000000000000FF00,
	0x0000000000FF0000,
	0x00000000FF000000,
	0x000000FF00000000,
	0x0000FF0000000000,
	0x00FF000000000000,
	0xFF00000000000000
};

const BitBoard Rank1 = RankMask[7];
const BitBoard Rank2 = RankMask[6];
const BitBoard Rank3 = RankMask[5];
const BitBoard Rank4 = RankMask[4];
const BitBoard Rank5 = RankMask[3];
const BitBoard Rank6 = RankMask[2];
const BitBoard Rank7 = RankMask[1];
const BitBoard Rank8 = RankMask[0];

// ��������
extern BitBoard WhitePieces, BlackPieces;
extern BitBoard BitBoards[13];
extern BitBoard &WhitePawns,   &BlackPawns;
extern BitBoard &WhiteKnights, &BlackKnights;
extern BitBoard &WhiteBishops, &BlackBishops;
extern BitBoard &WhiteRooks,   &BlackRooks;
extern BitBoard &WhiteQueens,  &BlackQueens;
extern BitBoard &WhiteKing,    &BlackKing;

// �����
extern BitBoard WPawnAtk[64], BPawnAtk[64];
extern BitBoard KnightMoves[64], KingMoves[64];
extern BitBoard SBM[64];
extern BitBoard WPasserMask[64], BPasserMask[64];
extern BitBoard IsolatedMask[64];
extern BitBoard ForwardMask[64], BackwardMask[64];
extern BitBoard UpMask[64], DownMask[64];
extern BitBoard EvasionsMask[64][64];
extern BitBoard InterceptMask[64][64];
extern BitBoard SupportWKing[64], SupportBKing[64];
extern BitBoard WKingQuad[64], WKingQuadExt[64];
extern BitBoard BKingQuad[64], BKingQuadExt[64];
extern BitBoard BishopTrapBQ, BishopTrapBK, BishopTrapWQ, BishopTrapWK;
extern BitBoard RookBoxBQ, RookBoxBK, RookBoxWQ, RookBoxWK, RookBoxKBQ, RookBoxKBK, RookBoxKWQ, RookBoxKWK;
extern BitBoard WBackwardMask[64], WBackwardAtkMask[64];
extern BitBoard BBackwardMask[64], BBackwardAtkMask[64];
extern BitBoard WCandidateMask[64], BCandidateMask[64];

// �����
extern uint8 BishopMagicShift[64], RookMagicShift[64];
extern uint16 BishopMagicOffset[64];
extern BitBoard BishopMagicMoves[5248];
extern uint32 RookMagicOffset[64];
extern BitBoard RookMagicMoves[102400];
extern uint8 OnLine[64][64];

// ���������� �������� �� GreKo
const BitBoard BishopMagicMask[64] =
{
	0x0040201008040200, 0x0000402010080400, 0x0000004020100a00, 0x0000000040221400, 0x0000000002442800, 0x0000000204085000, 0x0000020408102000, 0x0002040810204000,
	0x0020100804020000, 0x0040201008040000, 0x00004020100a0000, 0x0000004022140000, 0x0000000244280000, 0x0000020408500000, 0x0002040810200000, 0x0004081020400000,
	0x0010080402000200, 0x0020100804000400, 0x004020100a000a00, 0x0000402214001400, 0x0000024428002800, 0x0002040850005000, 0x0004081020002000, 0x0008102040004000,
	0x0008040200020400, 0x0010080400040800, 0x0020100a000a1000, 0x0040221400142200, 0x0002442800284400, 0x0004085000500800, 0x0008102000201000, 0x0010204000402000,
	0x0004020002040800, 0x0008040004081000, 0x00100a000a102000, 0x0022140014224000, 0x0044280028440200, 0x0008500050080400, 0x0010200020100800, 0x0020400040201000,
	0x0002000204081000, 0x0004000408102000, 0x000a000a10204000, 0x0014001422400000, 0x0028002844020000, 0x0050005008040200, 0x0020002010080400, 0x0040004020100800,
	0x0000020408102000, 0x0000040810204000, 0x00000a1020400000, 0x0000142240000000, 0x0000284402000000, 0x0000500804020000, 0x0000201008040200, 0x0000402010080400,
	0x0002040810204000, 0x0004081020400000, 0x000a102040000000, 0x0014224000000000, 0x0028440200000000, 0x0050080402000000, 0x0020100804020000, 0x0040201008040200
};
const BitBoard BishopMagicMult[64] =
{
	0x0410101000802040, 0x3002080104008000, 0x0090208081000040, 0x8008048100010040, 0x0482021080004000, 0x0082080208000011, 0x0000440220102004, 0x0001050800840400,
	0x000004100a120400, 0x0010204400808100, 0x0080080094208000, 0x0009042408800000, 0x4001040421008000, 0x0024009004200020, 0x0000040084242100, 0x00002200c1041000,
	0x0020001404042800, 0x0020000418028100, 0x000c200204040008, 0x0018040082004000, 0x0001000890400800, 0x8000800048200801, 0x0002000141042010, 0x0001000080829000,
	0x0008048020202200, 0x0005100005040800, 0x0001221010008200, 0x0004014024010002, 0x01108c0000802000, 0x0800420001009200, 0x0042040000410800, 0x0001020401008080,
	0x2010043000041000, 0x2002021080200100, 0x0008109000080044, 0x0100020080180480, 0x0001020a00040050, 0x0020080040008240, 0x0001010200142200, 0x0004040028004100,
	0x0201282004001000, 0x0008440220000801, 0x1001008040410400, 0x0000024200802800, 0x0000200208809400, 0x2003200080800100, 0x0182040104000200, 0x2084008400400100,
	0x4000410808400080, 0x0000888401600000, 0x0020402203100000, 0x5000000442020002, 0x0000448405040000, 0x0200040c08020200, 0x00a0021002008000, 0x0004810802208000,
	0x0000240100d01000, 0x0002104202100200, 0x1008002100411000, 0x0000000400411091, 0x0200000022024400, 0x0000802004900180, 0x0000201401060400, 0x0040080100420440
};
const BitBoard RookMagicMask[64] =
{
	0x000101010101017e, 0x000202020202027c, 0x000404040404047a, 0x0008080808080876, 0x001010101010106e, 0x002020202020205e, 0x004040404040403e, 0x008080808080807e,
	0x0001010101017e00, 0x0002020202027c00, 0x0004040404047a00, 0x0008080808087600, 0x0010101010106e00, 0x0020202020205e00, 0x0040404040403e00, 0x0080808080807e00,
	0x00010101017e0100, 0x00020202027c0200, 0x00040404047a0400, 0x0008080808760800, 0x00101010106e1000, 0x00202020205e2000, 0x00404040403e4000, 0x00808080807e8000,
	0x000101017e010100, 0x000202027c020200, 0x000404047a040400, 0x0008080876080800, 0x001010106e101000, 0x002020205e202000, 0x004040403e404000, 0x008080807e808000,
	0x0001017e01010100, 0x0002027c02020200, 0x0004047a04040400, 0x0008087608080800, 0x0010106e10101000, 0x0020205e20202000, 0x0040403e40404000, 0x0080807e80808000,
	0x00017e0101010100, 0x00027c0202020200, 0x00047a0404040400, 0x0008760808080800, 0x00106e1010101000, 0x00205e2020202000, 0x00403e4040404000, 0x00807e8080808000,
	0x007e010101010100, 0x007c020202020200, 0x007a040404040400, 0x0076080808080800, 0x006e101010101000, 0x005e202020202000, 0x003e404040404000, 0x007e808080808000,
	0x7e01010101010100, 0x7c02020202020200, 0x7a04040404040400, 0x7608080808080800, 0x6e10101010101000, 0x5e20202020202000, 0x3e40404040404000, 0x7e80808080808000
};
const BitBoard RookMagicMult[64] =
{
	0x0080002882104000, 0x0040084020005002, 0x0880100008200080, 0x010020100009000c, 0x1001000840208010, 0x0200020001440810, 0x1280008001004200, 0x0080004031000880,
	0x0080800120804004, 0x00204010022000c0, 0x0101801004200080, 0x0908808010000800, 0x0002000600201810, 0x2000802200808400, 0x0020800100802200, 0x0000800048800100,
	0x2008808000224000, 0x2008808040002001, 0x0000410020001504, 0x0808008010008008, 0x0400808008000401, 0x0040818004002200, 0x0820010100020004, 0x0080020005008044,
	0x4020248080004000, 0x0120002180400080, 0x0a00100080802000, 0x1000402200120008, 0x0201180080040080, 0x8200040080800600, 0x0041000100820004, 0x0020040200004481,
	0x4000804000801120, 0x0808601000404000, 0x0800881000802001, 0x0220801000800800, 0x0101140080800800, 0x0802008002804400, 0x0000020104001810, 0x4000088042000401,
	0x0005400060808000, 0x3008201000404000, 0x0010200100430010, 0x2010008100080800, 0x0000842801010010, 0x0011000804010042, 0x2000020810040001, 0x2800008044020001,
	0x0008248000c00080, 0x0010114008200040, 0x0018802000100880, 0x0080082090010100, 0x0200940080080080, 0x8400800200840080, 0x0100050810020400, 0x0010408400410200,
	0x00008000c1001021, 0x0001001040820022, 0x0000084100600011, 0x0000040861001001, 0x0082001020040802, 0x0401008400020801, 0x0001004200008c01, 0x0000010824004082
};

const uint8 BishopMagicBits[64] =
{
	 6,  5,  5,  5,  5,  5,  5,  6,
	 5,  5,  5,  5,  5,  5,  5,  5,
	 5,  5,  7,  7,  7,  7,  5,  5,
	 5,  5,  7,  9,  9,  7,  5,  5,
	 5,  5,  7,  9,  9,  7,  5,  5,
	 5,  5,  7,  7,  7,  7,  5,  5,
	 5,  5,  5,  5,  5,  5,  5,  5,
	 6,  5,  5,  5,  5,  5,  5,  6
};
const uint8 RookMagicBits[64] =
{
	12, 11, 11, 11, 11, 11, 11, 12,
	11, 10, 10, 10, 10, 10, 10, 11,
	11, 10, 10, 10, 10, 10, 10, 11,
	11, 10, 10, 10, 10, 10, 10, 11,
	11, 10, 10, 10, 10, 10, 10, 11,
	11, 10, 10, 10, 10, 10, 10, 11,
	11, 10, 10, 10, 10, 10, 10, 11,
	12, 11, 11, 11, 11, 11, 11, 12
};

// ���� ������������ �����
//------------------------

// ������
inline BitBoard BishopMoves(uint8 sq)
{
	return BishopMagicMoves[BishopMagicOffset[sq] + (((WhitePieces | BlackPieces) & BishopMagicMask[sq]) * BishopMagicMult[sq] >> BishopMagicShift[sq])];
}

// �����
inline BitBoard RookMoves(uint8 sq)
{
	return RookMagicMoves[RookMagicOffset[sq] + (((WhitePieces | BlackPieces) & RookMagicMask[sq]) * RookMagicMult[sq] >> RookMagicShift[sq])];
}
//-----------------------------------------------


// ���������� ������������� ���
inline uint8 PopCnt(register BitBoard b)
{ 
	b = b - ((b >> 1) & 0x5555555555555555);
	b = (b & 0x3333333333333333) + ((b >> 2) & 0x3333333333333333);
	b = (b + (b >> 4)) & 0x0f0f0f0f0f0f0f0f;
	return (b * 0x0101010101010101) >> 56;
}
/*
inline uint8 PopCnt(register BitBoard b)
{
	uint8 res = 0;
	while (b)
	{
		b &= b - 1;
		res++;
	}
	return res;
}*/

/*
inline uint8 PopCnt(BitBoard b)
{
	return __popcnt64(b);
}*/

#ifdef _M_X64

// ���������� ������� ������������� ���
inline uint8 LSB(BitBoard b) // Least Significant Bit
{
	register unsigned long index;
	_BitScanForward64(&index, b);
	return index;
}

inline uint8 MSB(BitBoard b) // Most Significant Bit
{
	register unsigned long index;
	_BitScanReverse64(&index, b);
	return index;
}

inline uint8 LSBC(BitBoard b) // Least Significant Bit
{
	if (!b) return 0;
	register unsigned long index;
	_BitScanForward64(&index, b);
	return index;
}

inline uint8 MSBC(BitBoard b) // Most Significant Bit
{
	if (!b) return 63;
	register unsigned long index;
	_BitScanReverse64(&index, b);
	return index;
}

// ���������� ������� ������������� ���
// � ���������� ���
inline uint8 ELSB(BitBoard &b) // Extract Least Significant Bit
{
	register unsigned long index;
	_BitScanForward64(&index, b);
	b &= b - 1;
	return index;
}

#else

const uint8 deBruijnIndex64[64] =
{
   63,  0, 58,  1, 59, 47, 53,  2,
   60, 39, 48, 27, 54, 33, 42,  3,
   61, 51, 37, 40, 49, 18, 28, 20,
   55, 30, 34, 11, 43, 14, 22,  4,
   62, 57, 46, 52, 38, 26, 32, 41,
   50, 36, 17, 19, 29, 10, 13, 21,
   56, 45, 25, 31, 35, 16,  9, 12,
   44, 24, 15,  8, 23,  7,  6,  5
};

inline uint8 LSB(const BitBoard b)
{
   return deBruijnIndex64[((b & -b) * 0x07EDD5E59A4E28C2) >> 58];
}

inline uint8 ELSB(BitBoard &b)
{
	uint8 res = deBruijnIndex64[((b & -b) * 0x07EDD5E59A4E28C2) >> 58];
	b &= b - 1;
	return res;
}

#endif

#endif
