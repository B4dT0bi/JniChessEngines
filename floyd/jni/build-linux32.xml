<project name="floyd-Linux-32" basedir="." default="postcompile">
    <!-- include the environment -->
    <property environment="env"/>
    <!-- output directory for temporary object files -->
    <property name="buildDir" value="target/linux32"/>
    <!-- output directory for the shared library -->
    <property name="libsDir" value="../libs/linux32"/>
    <!-- the name of the shared library -->
    <property name="libName" value="floyd.elf"/>
    <!-- the jni header jniPlatform to use -->
    <property name="jniPlatform" value="linux"/>
    <!-- the compilerPrefix for the C & C++ compilers -->
    <property name="compilerPrefix" value=""/>
    <!--  the compilerSuffix for the C & C++ compilers -->
    <property name="compilerSuffix" value=""/>

    <!-- define gcc compiler, options and files to compile -->
    <property name="gcc" value="${compilerPrefix}gcc${compilerSuffix}"/>
    <property name="gcc-opts" value="-c -Wall -O2 -mfpmath=sse -msse -fmessage-length=0 -m32 -fPIC -std=c99"/>
    <fileset id="gcc-files" dir="./">
        <exclude name="target/"/>
        <exclude name="floyd/Source/floydmodule.c"/>
    </fileset>

    <!-- define g++ compiler, options and files to compile -->
    <property name="g++" value="${compilerPrefix}g++${compilerSuffix}"/>
    <property name="g++-opts" value="-w -mpopcnt -Ofast -fno-rtti -fno-enforce-eh-specs -msse3 -DNDEBUG -m32 -std=c++11 -Wall -fno-strict-aliasing -I. -D_32BIT -DfloydVersion=0.9 -c"/>
    <fileset id="g++-files" dir="./">
        <exclude name="target/"/>
        <exclude name="floyd/Source/floydmodule.c"/>
        <include name="floyd/Source/cplus.c"/>
        <include name="floyd/Source/engine.c"/>
        <include name="floyd/Source/evaluate.c"/>
        <include name="floyd/Source/floydmain.c"/>
        <include name="floyd/Source/format.c"/>
        <include name="floyd/Source/kpk.c"/>
        <include name="floyd/Source/moves.c"/>
        <include name="floyd/Source/parse.c"/>
        <include name="floyd/Source/search.c"/>
        <include name="floyd/Source/test.c"/>
        <include name="floyd/Source/ttable.c"/>
        <include name="floyd/Source/uci.c"/>
        <include name="floyd/Source/zobrist.c"/>
    </fileset>

    <!-- define linker and options -->
    <property name="linker" value="${compilerPrefix}g++${compilerSuffix}"/>
    <property name="linker-opts" value="-m32"/>
    <property name="libraries" value="-pthread -lpthread"/>

    <!-- cleans the build directory, removes all object files and shared libs -->
    <target name="clean">
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${buildDir}"/>
            <fileset dir="${libsDir}" includes="**/*" excludes="**/.svn"/>
        </delete>
    </target>

    <target name="precompile">
        <condition property="compiler-found">
            <and>
                <or>
                    <!-- Include both b/c Windows might be either -->
                    <available file="${g++}" filepath="${env.PATH}"/>
                    <available file="${g++}" filepath="${env.Path}"/>
                </or>
                <or>
                    <!-- Include both b/c Windows might be either -->
                    <available file="${gcc}" filepath="${env.PATH}"/>
                    <available file="${gcc}" filepath="${env.Path}"/>
                </or>
            </and>
        </condition>
        <condition property="has-compiler">
            <equals arg1="${compiler-found}" arg2="true"/>
        </condition>

    </target>

    <target name="create-build-dir" depends="precompile" if="has-compiler">
        <!-- FIXME this is pretty nasty :/ -->
        <copy todir="${buildDir}">
            <fileset refid="g++-files"/>
            <fileset refid="gcc-files"/>
        </copy>
        <delete>
            <fileset dir="${buildDir}">
                <include name="*"/>
                <exclude name="*.o"/>
            </fileset>
        </delete>
    </target>

    <!-- compiles all C and C++ files to object files in the build directory -->
    <target name="compile" depends="create-build-dir" if="has-compiler">
        <mkdir dir="${buildDir}"/>
        <apply failonerror="true" executable="${g++}" dest="${buildDir}" verbose="true">
            <arg line="${g++-opts}"/>
            <arg value="-I."/>
            <arg value="-Ifloyd/Source"/>

            <srcfile/>
            <arg value="-o"/>
            <targetfile/>
            <fileset refid="g++-files"/>
            <compositemapper>
                <mapper type="glob" from="*.cpp" to="*.o"/>
                <mapper type="glob" from="*.mm" to="*.o"/>
            </compositemapper>
        </apply>
        <apply failonerror="true" executable="${gcc}" dest="${buildDir}" verbose="true">
            <arg line="${gcc-opts}"/>
            <arg value="-I."/>
            <arg value="-Ifloyd/Source"/>

            <srcfile/>
            <arg value="-o"/>
            <targetfile/>
            <fileset refid="gcc-files"/>
            <compositemapper>
                <mapper type="glob" from="*.c" to="*.o"/>
                <mapper type="glob" from="*.m" to="*.o"/>
            </compositemapper>
        </apply>
    </target>

    <!-- links the shared library based on the previously compiled object files -->
    <target name="link" depends="compile" if="has-compiler">
        <fileset dir="${buildDir}" id="objFileSet">
            <patternset>
                <include name="**/*.o"/>
            </patternset>
        </fileset>
        <pathconvert pathsep=" " property="objFiles" refid="objFileSet"/>
        <mkdir dir="${libsDir}"/>
        <exec executable="${linker}" failonerror="true" dir="${buildDir}">
            <arg line="${linker-opts}"/>
            <arg value="-o"/>
            <arg path="${libsDir}/${libName}"/>
            <arg line="${objFiles}"/>
            <arg line="${libraries}"/>
        </exec>
    </target>

    <target name="postcompile" depends="link">

    </target>
</project>
